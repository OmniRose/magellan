{"name":"Magellan","tagline":"JavaScript Latitude and Longitude Validation and Formatting","body":"## Introducing Magellan\r\nFrom validating the rules of composition for latitudes and longitudes to deciding on the format of the output, working with geo-coordinates can be a pretty big pain. \r\n\r\nUntil Magellan, that is...\r\n\r\nNow, working with coordinates can be as simple as:\r\n```\r\n// decimal-degrees to degrees-minutes-seconds\r\nmagellan(12.3456).latitude().toDMS()      // 12°20'44.1600\"N\r\nmagellan(-12.3456).latitude().toDMS(' ')  // 12° 20' 44.1600\" S\r\nmagellan(123.456).longitude().toDMS()     // 123°27'21.6000\"E\r\nmagellan(-123.456).longitude().toDMS(' ') // 123° 27' 21.6000\" W\r\n\r\n// or degrees-minutes-seconds to decimal-degrees\r\nmagellan('12°20\\'44.1600\"N').latitude().toDD()   // 12.3456\r\nmagellan('12°20\\'44.1600\"S').latitude().toDD()   // -12.3456\r\nmagellan('123°27\\'21.6000\"E').longitude().toDD() // 123.4560\r\nmagellan('123°27\\'21.6000\"W').longitude().toDD() // -123.4560\r\n```\r\nAll nice and gussied up for ya'!\r\n\r\n## Getting Started\r\nMagellan is designed to fit seamlessly into your application environment. It can be used standalone, as a ``<script>`` include on your page, or can be loaded as a CommonJS or AMD module.\r\n\r\nTo start using Magellan is simple. First, download the source file and include in your project. You can embed Magellan into your app using one of the following methods:\r\n### In an HTML Document\r\n```\r\n<!-- Somewhere in your HTML file -->\r\n<script src=\"/path/to/magellan.js\" type=\"text/javascript\"></script>\r\n```\r\n### In a CommonJS environment (e.g. NodeJS)\r\n```\r\nvar magellan = require('/path/to/magellan')\r\n```\r\n### In an AMD environment (e.g. RequireJS)\r\n```\r\nrequire(['/path/to/magellan'], function(magellan) { ... }\r\n```\r\n\r\n## Basic Usage\r\n\r\n### Creating a Magellan object\r\nMagellan was designed with flexibility in mind, and is capable of receiving your coordinate inputs in a number of ways:\r\n```\r\n// degrees-decimal input formats\r\nmagellan(12.3456)                    // positive number\r\nmagellan(-12.3456)                   // negative number\r\nmagellan('12.3456')                  // string in degrees-decimal format (can also start with +/-)\r\nmagellan(12.3456, 'E')               // with a 2nd argument indication the compass direction [NSEW]\r\n\r\n// degrees-minutes-seconds input formats\r\nmagellan('123')                      // just degrees (or just degrees and minutes)\r\nmagellan('12°34\\'56.7890\"S')         // degrees, minutes, seconds, milliseconds and direction\r\nmagellan('12 34 56 N')               // space-delimited string in degrees-minutes-seconds format\r\nmagellan('N12 34 56')                // same as above, with leading compass direction\r\n```\r\nOnce you have initialized the Magellan function, you will need to chain methods to produce output:\r\n```\r\nmagellan(12.3456).toDD()             // print 12.3456 in +/-DD.dddd format\r\nmagellan('123').toDMS()              // print 12.3456 in DD°MM'SS.mmmmm\" format\r\nmagellan('123').toDMS('_')           // same as above, except delimit the output with '_' character\r\nmagellan(12.3456).latitude()         // treat 12.3456 as latitude\r\nmagellan(12.3456).latitude().toDD()  // print 12.3456 as latitude in +/-DD.dddd format\r\n\r\nmagellan(12.3456).longitude()        // treat as longitude, also chain-able as seen above\r\n```\r\n\r\n## Authors and Contributors\r\nIf interested in contributing, contact Dave Barbalato (@dbarbalato)","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}